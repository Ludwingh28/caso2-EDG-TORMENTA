-- Crear la base de datos y seleccionarla
CREATE DATABASE IF NOT EXISTS tormenta_db;
USE tormenta_db;

-- ==========================================
-- Tabla: rol
-- Define los diferentes roles en el sistema.
-- ==========================================
CREATE TABLE rol (
    id_rol INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(50) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ==========================================
-- Tabla: usuario
-- Registra la información básica de todos los usuarios.
-- ==========================================
CREATE TABLE usuario (
    id_usuario INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    apellido_p VARCHAR(100) NOT NULL,
    apellido_m VARCHAR(100) NOT NULL,
    username VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    id_rol INT NOT NULL,
    estado ENUM('activo', 'desactivado') NOT NULL DEFAULT 'activo',
    FOREIGN KEY (id_rol) REFERENCES rol(id_rol)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;


-- ==========================================
-- Tabla: lugarVenta
-- Almacena la ubicación fija del punto de venta.
-- ==========================================
CREATE TABLE lugarVenta (
    id_lugarVenta INT AUTO_INCREMENT PRIMARY KEY,
    latitud DECIMAL(10,7) NOT NULL,
    longitud DECIMAL(10,7) NOT NULL,
    nombre VARCHAR(255) NOT NULL,
    estado ENUM('disponible', 'ocupado', 'desactivado') NOT NULL DEFAULT 'disponible'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ==========================================
-- Tabla: vendedor
-- Extiende la información del usuario cuando es vendedor.
-- Se asocia a un punto de venta registrado en lugarVenta.
-- ==========================================
CREATE TABLE vendedor (
    id_usuario INT PRIMARY KEY,
    pin VARCHAR(10) NOT NULL,
    id_lugarVenta INT NULL,
    FOREIGN KEY (id_usuario) REFERENCES usuario(id_usuario),
    FOREIGN KEY (id_lugarVenta) REFERENCES lugarVenta(id_lugarVenta)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ==========================================
-- Tabla: producto
-- Información de los productos (bebidas energizantes).
-- ==========================================
CREATE TABLE producto (
    id_producto INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    descripcion TEXT,
    precio DECIMAL(10,2) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ==========================================
-- Tabla: solicitud
-- Unifica las solicitudes de reposición y devolución.
-- Cada registro indica el tipo de solicitud ('reposicion' o 'devolucion'),
-- la cantidad solicitada, la fecha y estado.
-- ==========================================
CREATE TABLE solicitud (
    id_solicitud INT AUTO_INCREMENT PRIMARY KEY,
    id_vendedor INT NOT NULL,
    id_producto INT NOT NULL,
    cantidad INT NOT NULL,
    fecha_solicitud DATETIME NOT NULL,
    estado ENUM('pendiente', 'realizado', 'cancelado') NOT NULL,
    fecha_respuesta DATETIME,  -- Fecha en la que se cumplió la solicitud (puede ser la fecha de entrega)
    tipo ENUM('reposicion', 'devolucion') NOT NULL,
    FOREIGN KEY (id_vendedor) REFERENCES vendedor(id_usuario),
    FOREIGN KEY (id_producto) REFERENCES producto(id_producto)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ==========================================
-- Tabla: entrega
-- Registra la entrega de productos a un vendedor.
-- Se captura la ubicación (latitud y longitud) en el momento de la entrega,
-- el estado, y se asocia opcionalmente a una solicitud (reposicion o devolucion).
-- ==========================================
CREATE TABLE entrega (
    id_entrega INT AUTO_INCREMENT PRIMARY KEY,
    id_vendedor INT NOT NULL,
    id_producto INT NOT NULL,
    cantidad INT NOT NULL,
    fecha_hora DATETIME NOT NULL,   -- Cuando se inicia la transacción
    fecha_entrega DATETIME,           -- Cuando se confirma la entrega
    latitud DECIMAL(10,7) NOT NULL,     -- Ubicación en el momento de la entrega
    longitud DECIMAL(10,7) NOT NULL,
    estado ENUM('pendiente', 'realizada', 'cancelada') NOT NULL,
    id_solicitud INT,                 -- Opcional: relaciona la entrega con una solicitud
    FOREIGN KEY (id_vendedor) REFERENCES vendedor(id_usuario),
    FOREIGN KEY (id_producto) REFERENCES producto(id_producto),
    FOREIGN KEY (id_solicitud) REFERENCES solicitud(id_solicitud)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ==========================================
-- Tabla: ruta_chofer
-- Define la ruta diaria asignada a un chofer (usuario con rol 'Chofer').
-- ==========================================
CREATE TABLE ruta_chofer (
    id_ruta INT AUTO_INCREMENT PRIMARY KEY,
    id_chofer INT NOT NULL,
    fecha DATE NOT NULL,
    FOREIGN KEY (id_chofer) REFERENCES usuario(id_usuario)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ==========================================
-- Tabla: ruta_chofer_vendedor
-- Tabla intermedia que asigna N vendedores a una ruta diaria de un chofer.
-- Se puede definir el recorrido con el campo 'orden'.
-- ==========================================
CREATE TABLE ruta_chofer_vendedor (
    id_ruta INT NOT NULL,
    id_vendedor INT NULL,
    PRIMARY KEY (id_ruta, id_vendedor),
    FOREIGN KEY (id_ruta) REFERENCES ruta_chofer(id_ruta),
    FOREIGN KEY (id_vendedor) REFERENCES vendedor(id_usuario)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;




CREATE TABLE stock_vendedor (
    id_stock INT AUTO_INCREMENT PRIMARY KEY,
    id_vendedor INT NOT NULL,
    id_producto INT NOT NULL,
    fecha DATE NOT NULL,
    apertura INT NOT NULL DEFAULT 0,
    reposicion INT NOT NULL DEFAULT 0,
    devolucion INT NOT NULL DEFAULT 0,
    FOREIGN KEY (id_vendedor) REFERENCES vendedor(id_usuario),
    FOREIGN KEY (id_producto) REFERENCES producto(id_producto)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;